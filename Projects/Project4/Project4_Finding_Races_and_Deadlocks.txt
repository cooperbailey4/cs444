Part 1: Race Conditions

1.
Problem:
if x == 12:
    x++;

In this problem, the race condition comes up when two threads enter the if statement at the same time, causing them to
potentially increment x twice, when it should only be done once, to fix this add a mutex lock around the if so x is only
checked if it is equal to twelve once by one thread, this prevents any multiple threads from seeing x equal to 12 except
when it actually is, but once it is it will be incremented and become 13.

Solution:
lock(m1)
if x == 12:
    x++;
unlock(m1)

2.
Problem:
if x == 12:
    lock(m1)
    x++;
    unlock(m1)

This problem is very similar to first problem, except it is a problem concerning where to place the locks, if multiple
threads enter the if statement, x will still be incremented multiple times, each thread will do it one after another
though, this is the origin of the problem, instead we need to copy our solution in the first and move the mutexes
outside of the if statement, we can't leave either the lock or unlock in the if block, because then we will be waiting
for the lock to unlock if the unlock statement is in the if, and we have the previous problem if we leave the lock after
the if.

Solution:
lock(m1)
if x == 12:
    x++;
unlock(m1)


3.
Problem:
if y not in hash:
    hash[y] = 12
else
    hash[y]++

This problem is contingent on the value at y in the hash, if y isn't in the hash and a thread goes through there,
but then is followed by another thread that also doesn't see y, and the first thread sets hash[y] to 12, then another
third thread sees y is in the array and goes to increment it, but after doing so the second thread that hadn't set
hash[y] to twelve yet goes through and sets it to 12 after the increment, making it 12 again, when it should be have
been thirteen. To fix this, put a mutex lock before the if statement and unlock it after the full block.

Solution:
lock(m1)
if y not in hash:
    hash[y] = 12
else
    hash[y]++
unlock(m1)

4.
Problem:
x += 12;

This problem does two operations when it is gone through, it gets x and it adds 12 to it, so if two or more threads go
through and assign the original value to x say 0, and add 12 to it, the value will only become 12, it will not increase
by more than the twelve even if multiple threads add more to the items, until after x gets a new value, to fix this add
a lock before the line, and after the line so the value only allows one thread to increment it at a time.

Solution:
lock(m1)
x += 12;
unlock(m1)

5.
Problem:
x = 0

semaphore_init(value):
    x = value

semaphore_signal():
    x++;

semaphore_wait():
    while x == 0:
        do nothing  # spinlock

    x--

For this problem, there are multiple issues that could occur, the first is within semaphore_signal, similar to problem
four, x++ is not necessarily atomic, so multiple threads could come it and add 1 to an x that has a value of 0 which
would cause issues, so to fix this we need to put a lock around the signal, another problem comes up with the
semaphore_wait, if multiple threads get through comparing x to 0 in the while loop, but it is 1 and multiple threads get
through, we could end up with x -1000 or something else undesirable, to fix this put a lock around the while loop and
x--.


Solution:
x = 0

semaphore_init(value):
    x = value

semaphore_signal():
    lock()
    x++;
    unlock()

semaphore_wait():
    lock()
    while x == 0:
        do nothing  # spinlock

    x--;
    unlock()



Part 2: Deadlocks


1.
Problem:
function1():
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)

function2():
    lock(m2)
    lock(m1)

    unlock(m1)
    unlock(m2)

For this problem, the deadlock occurs when one thread goes through function 1 and obtains the first lock(1), but another
thread goes through function 2 and obtains lock(m2), then the first lock goes to obtain lock(m2) but can't because
the second thread already has it, and if the second thread tries to obtain lock(m1) it can't because it is already
obtained by thread 1. To fix this, we have two options first: order our locks so they don't get acquired out of order
and are only obtained in the order we want, which will stop the deadlock, or we can add another lock around both
functions so only one thread may go through either function at a time, very similar to the other solution but keeping
the original order, and adding another lock.

Solution 1:
function1():
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)

function2():
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)

Solution 2:
function1():
    lock(m3)
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)
    unlock(m3)
function2():
    lock(m3)
    lock(m2)
    lock(m1)

    unlock(m1)
    unlock(m2)
    unlock(m3)



2.
Problem:
function1():
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)

function2():
    lock(m1)
    lock(m2)

    unlock(m1)
    lock(m1)

    unlock(m2)
    unlock(m1)

In this problem, the deadlock is created when the a thread goes through the second function until the unlock(m1), then
another thread goes through the first function getting the lock(m1), then when the first thread in the second function
tries to get the lock(m1) it can't, but when the second thread tries to continue in the first function it can't get the
lock(m2) because it is already held by the first thread. To fix this the easiest way would be placing a lock(m3) around
both functions so only one thread can go through either function at once.

Solution:
function1():
    lock(m3)
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)
    unlock(m3)

function2():
    lock(m3)
    lock(m1)
    lock(m2)

    unlock(m1)
    lock(m1)

    unlock(m2)
    unlock(m1)
    unlock(m3)


3.
Problem:
function1(m1, m2):  # Mutexes are passed in by caller
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)

This problem can cause a deadlock if instead of the mutexes being acquired in the order that is seen with m1 and m2, two
threads get the mutexes in different orders, the first thread gets m1 and m2 in that order, but a second thread gets m2
and m1 in that order, so the line lock(m1) can lock both m1 and m2 if two threads associate the variable as m2,
preventing the function from moving on for either thread because then the first thread tries to acquire m2 and the
second thread tries to acquire the m1 lock, but neither can aquire those locks because they were already acquired by the
other thread. To fix this we need to lock what order the locks are obtained in, so taking both m1 and m2 outside of the
function and making them global will allow the locks to only allow one thread through the function by locking the
function with no way around acquiring them in the correct order.

Solution:
create mutex: m1, m2

function1():  # Mutexes are passed in by caller
    lock(m1)
    lock(m2)

    unlock(m2)
    unlock(m1)
